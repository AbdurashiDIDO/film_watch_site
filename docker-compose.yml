version: '3.8'

networks:
  my-network:
    driver: bridge

services:
  web:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    image: django_web
    # '/start' is the shell script used to run the service
    command: /start
    # this volume is used to map the files and folders on the host to the container
    # so if we change code on the host, code in the docker container will also be changed
    volumes:
      - .:/app
    expose:
      - 8000
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - pgpool

  pg-0:
    image: docker.io/bitnami/postgresql-repmgr:14
    ports:
      - 5432
    volumes:
      - pg_0_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=1
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=1
      - POSTGRESQL_DATABASE=film_watch_site
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-1,pg-0
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
      - REPMGR_USERNAME=postgres
      - REPMGR_PASSWORD=1
  pg-1:
    image: docker.io/bitnami/postgresql-repmgr:14
    ports:
      - 5432
    volumes:
      - pg_1_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=1
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=1
      - POSTGRESQL_DATABASE=film_watch_site
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
      - REPMGR_USERNAME=postgres
      - REPMGR_PASSWORD=1
  pgpool:
    image: docker.io/bitnami/pgpool:4
    ports:
      - 5432:5432
    environment:
      - PGPOOL_BACKEND_NODES=0:pg-0:5432:0,1:pg-1:5432:1
      - PGPOOL_SR_CHECK_USER=postgres
      - PGPOOL_SR_CHECK_PASSWORD=1
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=postgres
      - PGPOOL_POSTGRES_PASSWORD=1
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      - PGPOOL_POSTGRES_CUSTOM_USERS=customuser
      - PGPOOL_POSTGRES_CUSTOM_PASSWORDS=custompassword
    healthcheck:
      test: [ "CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh" ]
      interval: 10s
      timeout: 5s
      retries: 5


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.5.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch


  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - 5672:5672
      - 15672:15672

  celery_worker:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    image: celery_worker
    command: /start-celeryworker
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - pgpool

  celery_beat:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    image: celery_beat
    command: /start-celerybeat
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - pgpool

  flower:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    image: django_celery_example_celery_flower
    command: /start-flower
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - 5555:5555
    depends_on:
      - rabbitmq
      - pgpool

  nginx:
    build: ./compose/nginx
    ports:
      - 80:80
    volumes:
      - static_volume:/app
    depends_on:
      - web

volumes:
  postgres_data:
  pg_0_data:
    driver: local
  pg_1_data:
    driver: local
  elasticsearch-data:
    driver: local
  static_volume:
    driver: local
